/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/models/door.gltf --t --o components/door/door.tsx 
*/

import React, { useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { ANIMATION_SPEED, GLTFResult, Scale } from './type';
import { useDoorStore } from '../store';
import { Group, Mesh, Object3DEventMap } from 'three';
import { useFrame } from '@react-three/fiber';
import { HoneyComb } from './honeycomb';
import { DoorLeaf } from './door-leaf';
import { Hinge } from './hinge';
import { Frame } from './frame';
// import { Scale } from 'lucide-react';

export function Model(props: JSX.IntrinsicElements['group']) {
  const result = useGLTF('/models/door.gltf') as GLTFResult;
  const { nodes, materials } = result;
  const storage = useDoorStore();
  const DOOR_SCALE: Scale = {
    width: storage.size.width / 83,
    height: storage.size.height / 210,
  };

  const honeyCombMaterial = materials.mdf;

  const getDoorFinishingMaterial = () => {
    if (storage.finishing?.name === 'HPL Std') {
      return materials.tacoSheet;
    }
    if (storage.finishing?.name === 'PVC Sheet') {
      return materials.tacoHpl;
    }
    return honeyCombMaterial;
  };
  const doorFinishingMaterial = getDoorFinishingMaterial();

  const doorGroupRef = React.useRef<Group<Object3DEventMap> | null>(null);

  useFrame(() => {
    if (doorGroupRef.current) {
      const y =
        DOOR_SCALE.height < 1 ? DOOR_SCALE.height : DOOR_SCALE.height * 1.005;

      doorGroupRef.current.scale.lerp(
        { x: DOOR_SCALE.width, y: y, z: 1 },
        ANIMATION_SPEED
      );
    }
  });

  return (
    <group {...props} dispose={null}>
      <group ref={doorGroupRef}>
        {storage.finishing ? (
          <DoorLeaf
            gltfResult={result}
            name={storage.groove?.name ?? ''}
            material={doorFinishingMaterial}
          />
        ) : (
          <HoneyComb gltfResult={result} material={honeyCombMaterial} />
        )}
      </group>
      <Hinge gltfResult={result} DOOR_SCALE={DOOR_SCALE} />
      <Frame
        gltfResult={result}
        material={doorFinishingMaterial}
        DOOR_SCALE={DOOR_SCALE}
      />
      {/*
      {storage.keyHole && storage.keyHole.isKeyHole && (
        <group>
          <mesh geometry={nodes.Handle.geometry} material={materials.chrome2} />
          <mesh
            geometry={nodes.Handle_1.geometry}
            material={materials.chrome1}
          />
          <group position={[0, 0, 0.04]} rotation={[0, 0, -Math.PI]} scale={-1}>
            <mesh
              geometry={nodes.Handle.geometry}
              material={materials.chrome2}
            />
            <mesh
              geometry={nodes.Handle_1.geometry}
              material={materials.chrome1}
            />
          </group>
        </group>
      )} */}

      {/* {storage.frame?.architrave && (
        <group position={[0.001, 2.16, 0.06]}>
          <mesh
            geometry={nodes.ArchFrontLeft.geometry}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.ArchBackLeft.geometry}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
          <group ref={rightArch} position={[-0.011, -2.16, -0.06]}>
            <mesh
              geometry={nodes.ArchFrontRight.geometry}
              material={frameMaterials}
            />
            <mesh
              geometry={nodes.ArchBackRight.geometry}
              material={frameMaterials}
            />
          </group>

          <group ref={topArch}>
            <mesh
              geometry={nodes.ArchFrontTop.geometry}
              material={frameMaterials}
              position={[-0.001, -2.16, -0.06]}
            />

            <mesh
              geometry={nodes.ArchBackTop.geometry}
              material={frameMaterials}
              position={[-0.001, -2.16, -0.06]}
            />
          </group>
        </group>
      )}
      {storage.frame !== undefined && storage.frame.name !== 'Tanpa Kusen' && (
        <group position={[0.001, 2.16, 0.06]}>
          <mesh
            geometry={nodes.FrameLeft.geometry}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.FrameRight.geometry}
            material={frameMaterials}
            ref={rightFrame}
            position={[-0.001, -2.16, -0.06]}
          />
          <mesh
            ref={topFrame}
            geometry={nodes.FrameTop.geometry}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
        </group>
      )} */}
    </group>
  );
}

useGLTF.preload('/models/door.gltf');
