/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/door.gltf --t --o components/door/door.tsx 
*/

import React, { useEffect } from 'react';
import { GLTFResult } from './type';
import { DoorState } from '../store';
import { Frame } from 'lucide-react';

interface FrameProps {
  result: GLTFResult;
  storage: DoorState;
}

export function DoorFrame({ result, storage }: FrameProps) {
  const { nodes, materials } = result;
  const frameMaterials = storage.frameFinishing?.name.startsWith('Melamin')
    ? materials.melamin
    : materials.hpl;

  const FRAME_WIDTH_SCALE = storage.size.width / 83;
  const DEFAULT = -0.011;

  const [doorWidthPosition, setDoorWidthPosition] = React.useState(
    DEFAULT + 0.011 * FRAME_WIDTH_SCALE
  );
  const [archWidthScale, setArchWidthScale] = React.useState(FRAME_WIDTH_SCALE);

  const [archWidthPosition, setArchWidthPosition] = React.useState(
    -0.001 + 0.011 * archWidthScale
  );
  useEffect(() => {
    setDoorWidthPosition(DEFAULT + 0.88 * (FRAME_WIDTH_SCALE - 1));
    setArchWidthScale(FRAME_WIDTH_SCALE * 1.02);
    setArchWidthPosition(-0.001 + 0.88 * (FRAME_WIDTH_SCALE - 1));
  }, [storage.size.width]);
  return (
    <group>
      {storage.frame?.architrave && (
        <group position={[0.001, 2.16, 0.06]}>
          <mesh
            geometry={nodes.ArchFrontLeft.geometry}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.ArchFrontRight.geometry}
            material={frameMaterials}
            position={[archWidthPosition, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.ArchFrontTop.geometry}
            material={frameMaterials}
            scale={[archWidthScale, 1, 1]}
            position={[-0.001, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.ArchBackLeft.geometry}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.ArchBackRight.geometry}
            material={frameMaterials}
            position={[archWidthPosition, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.ArchBackTop.geometry}
            material={frameMaterials}
            scale={[archWidthScale, 1, 1]}
            position={[-0.001, -2.16, -0.06]}
          />
        </group>
      )}
      {storage.frame !== undefined && storage.frame.name !== 'Tanpa Kusen' && (
        <group position={[0.001, 2.16, 0.06]}>
          <mesh
            geometry={nodes.FrameLeft.geometry}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.FrameRight.geometry}
            material={frameMaterials}
            position={[doorWidthPosition, -2.16, -0.06]}
          />
          <mesh
            geometry={nodes.FrameTop.geometry}
            scale={[FRAME_WIDTH_SCALE, 1, 1]}
            material={frameMaterials}
            position={[-0.001, -2.16, -0.06]}
          />
        </group>
      )}
    </group>
  );
}
