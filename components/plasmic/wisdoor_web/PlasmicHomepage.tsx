// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: t5hn1zAmdmxJoKmkXG4dPV
// Component: qpi3-pwEc1RY

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';

import { Navigation } from '../../navigation'; // plasmic-import: UiHqtQRdZ-A_/codeComponent
import { Hero } from '../../../public/hero'; // plasmic-import: DLj-cPcbVVVA/codeComponent
import { BlurFade } from '../../magicui/blur-fade'; // plasmic-import: mo0WkofSVfhk/codeComponent
import { PulsatingButton } from '../../magicui/pulsating-button'; // plasmic-import: O5iAxnp4_43w/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic.module.css'; // plasmic-import: t5hn1zAmdmxJoKmkXG4dPV/projectcss
import sty from './PlasmicHomepage.module.css'; // plasmic-import: qpi3-pwEc1RY/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<'div'>;
  navigation?: Flex__<typeof Navigation>;
  hero?: Flex__<typeof Hero>;
  blurFade?: Flex__<typeof BlurFade>;
  pulsatingButton?: Flex__<typeof PulsatingButton>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={'root'}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Navigation
          data-plasmic-name={'navigation'}
          data-plasmic-override={overrides.navigation}
          alt={'Logo Wisdoor'}
          className={classNames('__wab_instance', sty.navigation)}
          image={'/plasmic/wisdoor_web/images/image.svg'}
        />

        <Hero
          data-plasmic-name={'hero'}
          data-plasmic-override={overrides.hero}
          alt={'Logo Wisdoor'}
          className={classNames('__wab_instance', sty.hero)}
          image={'/plasmic/wisdoor_web/images/heroHomepage.png'}
        />

        <section className={classNames(projectcss.all, sty.section___0Md7)}>
          <BlurFade
            data-plasmic-name={'blurFade'}
            data-plasmic-override={overrides.blurFade}
            blur={'6px'}
            className={classNames('__wab_instance', sty.blurFade)}
            delay={0}
            duration={0.4}
            inView={false}
            inViewMargin={'-50px'}
            variant={{
              hidden: { y: 6, opacity: 0, filter: 'blur(6px)' },
              visible: { y: -6, opacity: 1, filter: 'blur(0px)' },
            }}
            yOffset={6}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z850Z
              )}
            >
              {'Model 3'}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qM8Me
              )}
            >
              {'1.99% APR Financing Ending August 31'}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jQSee
              )}
            >
              {'From $34,9901'}
            </div>
          </BlurFade>
        </section>
        <section className={classNames(projectcss.all, sty.section___9Wqeb)}>
          <PulsatingButton
            data-plasmic-name={'pulsatingButton'}
            data-plasmic-override={overrides.pulsatingButton}
            className={classNames('__wab_instance', sty.pulsatingButton)}
            duration={'1.5s'}
            onClick={async () => {
              const $steps = {};

              $steps['goToDoor'] = true
                ? (() => {
                    const actionArgs = { destination: `/door` };
                    return (({ destination }) => {
                      if (
                        typeof destination === 'string' &&
                        destination.startsWith('#')
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: 'smooth' });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps['goToDoor'] != null &&
                typeof $steps['goToDoor'] === 'object' &&
                typeof $steps['goToDoor'].then === 'function'
              ) {
                $steps['goToDoor'] = await $steps['goToDoor'];
              }
            }}
            pulseColor={'#22c55e'}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gdEut
              )}
            >
              {'Order Now'}
            </div>
          </PulsatingButton>
        </section>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'navigation', 'hero', 'blurFade', 'pulsatingButton'],
  navigation: ['navigation'],
  hero: ['hero'],
  blurFade: ['blurFade'],
  pulsatingButton: ['pulsatingButton'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  navigation: typeof Navigation;
  hero: typeof Hero;
  blurFade: typeof BlurFade;
  pulsatingButton: typeof PulsatingButton;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicHomepage';
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent('navigation'),
    hero: makeNodeComponent('hero'),
    blurFade: makeNodeComponent('blurFade'),
    pulsatingButton: makeNodeComponent('pulsatingButton'),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: 'Wisdoor',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
