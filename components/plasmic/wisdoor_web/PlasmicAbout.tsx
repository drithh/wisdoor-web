// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: t5hn1zAmdmxJoKmkXG4dPV
// Component: 4a8DjtM_KrIy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Navigation } from "../../navigation"; // plasmic-import: UiHqtQRdZ-A_/codeComponent
import { Hero } from "../../hero"; // plasmic-import: DLj-cPcbVVVA/codeComponent
import { BlurFade } from "../../magicui/blur-fade"; // plasmic-import: mo0WkofSVfhk/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { BoxReveal } from "../../magicui/box-reveal"; // plasmic-import: jgqirGASTSZT/codeComponent
import { ImageGradient } from "../../image-gradient"; // plasmic-import: BYKZmpg0gHCS/codeComponent
import { SingleProductText } from "../../single-product"; // plasmic-import: HyyMSog-JLpO/codeComponent
import { MultipleProduct } from "../../multiple-product"; // plasmic-import: pE3Y9Bt6qwFd/codeComponent

import { useScreenVariants as useScreenVariantsqZb5Tz3BAq8Z } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qZB5tz3bAQ8Z/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: t5hn1zAmdmxJoKmkXG4dPV/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: 4a8DjtM_KrIy/css

createPlasmicElementProxy;

export type PlasmicAbout__VariantMembers = {};
export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: Flex__<"div">;
  navigation?: Flex__<typeof Navigation>;
  hero?: Flex__<typeof Hero>;
  columns?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  multipleProduct?: Flex__<typeof MultipleProduct>;
};

export interface DefaultAboutProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqZb5Tz3BAq8Z()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAbout.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAbout.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAbout.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Navigation
          data-plasmic-name={"navigation"}
          data-plasmic-override={overrides.navigation}
          alt={"Logo Wisdoor"}
          black={false}
          className={classNames("__wab_instance", sty.navigation)}
          image={"/plasmic/wisdoor_web/images/logoWhiteTransPng.png"}
        />

        <section
          className={classNames(projectcss.all, sty.section__eYcxF)}
          id={"about"}
        >
          <Hero
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            alt={"Logo Wisdoor"}
            className={classNames("__wab_instance", sty.hero)}
            image={
              "/plasmic/wisdoor_web/images/sitemapWhiteboardInGreenPurpleBasicStyle1Png.png"
            }
          />

          <section className={classNames(projectcss.all, sty.section__vl52G)}>
            <BlurFade
              blur={"6px"}
              className={classNames("__wab_instance", sty.blurFade__yP7Tk)}
              delay={0}
              duration={0.4}
              inView={false}
              inViewMargin={"-50px"}
              variant={{
                hidden: { y: 6, opacity: 0, filter: "blur(6px)" },
                visible: { y: -6, opacity: 1, filter: "blur(0px)" }
              }}
              yOffset={6}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m8XC
                )}
              >
                {"About Us"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vkN9Q
                )}
              >
                {"Crafting Excellence in woods"}
              </div>
            </BlurFade>
          </section>
          <section className={classNames(projectcss.all, sty.section___05VAo)}>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__h5LGi)}>
                <BlurFade
                  blur={"6px"}
                  className={classNames("__wab_instance", sty.blurFade__wDW7)}
                  delay={0}
                  duration={0.4}
                  inView={false}
                  inViewMargin={"-50px"}
                  variant={{
                    hidden: { y: 6, opacity: 0, filter: "blur(6px)" },
                    visible: { y: -6, opacity: 1, filter: "blur(0px)" }
                  }}
                  yOffset={6}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wxO3P
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"100+"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bAqwv
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Karyawan"}
                      </span>
                    </React.Fragment>
                  </div>
                </BlurFade>
              </div>
              <div className={classNames(projectcss.all, sty.column__arYR)}>
                <BlurFade
                  blur={"6px"}
                  className={classNames("__wab_instance", sty.blurFade__oUO6)}
                  delay={0}
                  duration={0.4}
                  inView={false}
                  inViewMargin={"-50px"}
                  variant={{
                    hidden: { y: 6, opacity: 0, filter: "blur(6px)" },
                    visible: { y: -6, opacity: 1, filter: "blur(0px)" }
                  }}
                  yOffset={6}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xWzD
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"20+"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aRo9N
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Tahun"}
                      </span>
                    </React.Fragment>
                  </div>
                </BlurFade>
              </div>
              <div className={classNames(projectcss.all, sty.column__dh7Mk)}>
                <BlurFade
                  blur={"6px"}
                  className={classNames("__wab_instance", sty.blurFade__borVr)}
                  delay={0}
                  duration={0.4}
                  inView={false}
                  inViewMargin={"-50px"}
                  variant={{
                    hidden: { y: 6, opacity: 0, filter: "blur(6px)" },
                    visible: { y: -6, opacity: 1, filter: "blur(0px)" }
                  }}
                  yOffset={6}
                >
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={"<div>2,975.32 m<sup>2</sup></div>"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jNCuA
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Luas Pabrik"}
                      </span>
                    </React.Fragment>
                  </div>
                </BlurFade>
              </div>
            </div>
          </section>
        </section>
        <section
          className={classNames(projectcss.all, sty.section__htk6)}
          id={"product"}
        >
          <BoxReveal
            className={classNames("__wab_instance", sty.boxReveal__pEv89)}
            width={"fit-content"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__st85T
              )}
            >
              {"Commitment to sustainability"}
            </div>
          </BoxReveal>
          <BoxReveal
            className={classNames("__wab_instance", sty.boxReveal__u8UzA)}
            width={"fit-content"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xc7T
              )}
            >
              {
                "Tanggung jawab lingkungan adalah inti dari nilai-nilai PT Wiratama Inti Sentoas. Kami secara aktif mempromosikan penggunaaan kayu perkebunan, termasuk kayu jati, mahoni, bayu, kayu karet, akasia, dan lainnya"
              }
            </div>
          </BoxReveal>
        </section>
        <section
          className={classNames(projectcss.all, sty.section__qLw9L)}
          id={``}
        >
          <ImageGradient
            alt={"Logo Wisdoor"}
            className={classNames("__wab_instance", sty.imageGradient__bwydN)}
            gradientBottomBlack={true}
            gradientTopWhite={true}
            image={
              "/plasmic/wisdoor_web/images/whatsAppImage20241028At121213PmJpeg.jpg"
            }
          />

          <SingleProductText
            className={classNames(
              "__wab_instance",
              sty.singleProductText__mFrPe
            )}
            description={
              "We design sustainable systems that are massively scalable\u2014resulting in the greatest environmental benefit possible. Our energy generation and storage products work together with our electric vehicles to amplify their impact."
            }
            title={"Power Earth"}
          />

          <MultipleProduct
            data-plasmic-name={"multipleProduct"}
            data-plasmic-override={overrides.multipleProduct}
            className={classNames("__wab_instance", sty.multipleProduct)}
            products={(() => {
              const __composite = [
                { title: null, description: null, image: null },
                { title: null, description: "Description", image: null },
                {
                  title: null,
                  description: "Description",
                  image: "/placeholder.svg"
                }
              ];
              __composite["0"]["title"] = "Solar";
              __composite["0"]["description"] =
                "Produce solar energy for residential and commercial needs";
              __composite["0"]["image"] =
                "https://site-assets.plasmic.app/ac8b44f7fbf5a81c839a180920ea249c.png";
              __composite["1"]["title"] = "Product2";
              __composite["1"]["image"] =
                "https://site-assets.plasmic.app/1818fb887829971355e6af8eee65fc82.png";
              __composite["2"]["title"] = "Product3";
              return __composite;
            })()}
          />

          <ImageGradient
            alt={"Logo Wisdoor"}
            className={classNames("__wab_instance", sty.imageGradient__w3Ws)}
            gradientBottomBlack={false}
            gradientTopWhite={false}
            image={
              "/plasmic/wisdoor_web/images/aboutUsMachineDesktopGlobalPng.png"
            }
          />

          <SingleProductText
            className={classNames(
              "__wab_instance",
              sty.singleProductText__veONm
            )}
            description={
              "We design sustainable systems that are massively scalable\u2014resulting in the greatest environmental benefit possible. Our energy generation and storage products work together with our electric vehicles to amplify their impact."
            }
            title={"Power Earth"}
          />

          <ImageGradient
            alt={"Logo Wisdoor"}
            className={classNames("__wab_instance", sty.imageGradient__m9A87)}
            gradientBottomBlack={false}
            gradientTopWhite={false}
            image={
              "/plasmic/wisdoor_web/images/aboutUsExceptionalDesktopGlobalPng.png"
            }
          />

          <SingleProductText
            className={classNames(
              "__wab_instance",
              sty.singleProductText__quhfr
            )}
            description={
              "We design sustainable systems that are massively scalable\u2014resulting in the greatest environmental benefit possible. Our energy generation and storage products work together with our electric vehicles to amplify their impact."
            }
            title={"Power Earth"}
          />
        </section>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigation",
    "hero",
    "columns",
    "embedHtml",
    "multipleProduct"
  ],
  navigation: ["navigation"],
  hero: ["hero"],
  columns: ["columns", "embedHtml"],
  embedHtml: ["embedHtml"],
  multipleProduct: ["multipleProduct"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigation: typeof Navigation;
  hero: typeof Hero;
  columns: "div";
  embedHtml: typeof Embed;
  multipleProduct: typeof MultipleProduct;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAbout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent("navigation"),
    hero: makeNodeComponent("hero"),
    columns: makeNodeComponent("columns"),
    embedHtml: makeNodeComponent("embedHtml"),
    multipleProduct: makeNodeComponent("multipleProduct"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "About",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
