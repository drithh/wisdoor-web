/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: t5hn1zAmdmxJoKmkXG4dPV
// Component: ZENzt5OHpEte

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Navigation } from "../../navigation"; // plasmic-import: UiHqtQRdZ-A_/codeComponent
import { CarouselWrapper } from "../../carousel-wrapper"; // plasmic-import: Dic_szRsJCUd/codeComponent
import Footer from "../../Footer"; // plasmic-import: jyVfSNkVX5DJ/component

import { useScreenVariants as useScreenVariantsqZb5Tz3BAq8Z } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qZB5tz3bAQ8Z/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: t5hn1zAmdmxJoKmkXG4dPV/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: ZENzt5OHpEte/css

createPlasmicElementProxy;

export type PlasmicAbout__VariantMembers = {};
export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: Flex__<"div">;
  navigation?: Flex__<typeof Navigation>;
  carouselWrapper?: Flex__<typeof CarouselWrapper>;
  columns?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultAboutProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqZb5Tz3BAq8Z()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Navigation
        data-plasmic-name={"navigation"}
        data-plasmic-override={overrides.navigation}
        alt={"Logo Wisdoor"}
        black={false}
        className={classNames("__wab_instance", sty.navigation)}
        image={"/plasmic/wisdoor_web/images/image1Png.png"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__kjvJl)}>
        <CarouselWrapper
          data-plasmic-name={"carouselWrapper"}
          data-plasmic-override={overrides.carouselWrapper}
          carousels={(() => {
            const __composite = [
              { image: null, alt: "Logo Wisdoor" },
              { image: null, alt: "Logo Wisdoor" }
            ];
            __composite["0"]["image"] =
              "https://site-assets.plasmic.app/c2dbfa00e97de14ceeeec669db7d41f1.png";
            __composite["1"]["image"] =
              "https://site-assets.plasmic.app/ac8b44f7fbf5a81c839a180920ea249c.png";
            return __composite;
          })()}
          className={classNames("__wab_instance", sty.carouselWrapper)}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3BhbE)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zXqk
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#96838380" }}
              >
                {"ABOUT US >"}
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#968383" }}
              >
                {" MANUFACTURING"}
              </span>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__y7Foh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__twCzR
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Wijaya Door: \nCrafted to Perfection, \nDelivered with Speed."
                  : "Wijaya Door: \nCrafted to Perfection,\nDelivered with Speed."}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__vb9Oe)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v18SD
                )}
              >
                {
                  "Since 1994, Wijaya Door has been dedicated to craftsmanship and innovation. With roots in kiln drying and molding for timber furniture, we expanded into finger joint laminating for door cores, exporting to markets across China, Taiwan, Singapore, South Africa, the Netherlands, and Korea.\n\nOur R&D division drives continuous innovation, supported by advanced Italian-made technology, including CNC machines, edging and vacuum membrane machines, and CAD/CAM software. These high-investment tools enable precision, customization, and durability in every product. \n\nAt Wijaya Door, we uphold the highest standards in durability, timely delivery, and integrity\u2014creating doors that last, tailored to the unique needs of our clients. Through relentless pursuit of quality and on-time delivery, we\u2019re committed to remaining a trusted name in the industry."
                }
              </div>
            </div>
          </Stack__>
        </Stack__>
        <Footer
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames("__wab_instance", sty.footer)}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigation", "carouselWrapper", "columns", "footer"],
  navigation: ["navigation"],
  carouselWrapper: ["carouselWrapper"],
  columns: ["columns"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigation: typeof Navigation;
  carouselWrapper: typeof CarouselWrapper;
  columns: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAbout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent("navigation"),
    carouselWrapper: makeNodeComponent("carouselWrapper"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
