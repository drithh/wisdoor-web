// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: t5hn1zAmdmxJoKmkXG4dPV
// Component: rd8xUc-BnZoZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ViewerWrapper } from "../../door/components/viewer-wrapper"; // plasmic-import: 3Su-mecoGpzv/codeComponent
import { DoorViewer } from "../../door-viewer"; // plasmic-import: SH_PqjJ_I-5G/codeComponent
import { ConfiguratorWrapper } from "../../door/components/configurator-wrapper"; // plasmic-import: h1IjeS8_3odo/codeComponent
import { ChooseDoor } from "../../door/configurator/choose"; // plasmic-import: LMn0cgg59gxw/codeComponent
import { SizeDoor } from "../../door/configurator/size"; // plasmic-import: 7H1b44gqct0K/codeComponent
import { FinishingDoor } from "../../door/configurator/finishing"; // plasmic-import: YV413SY07lXf/codeComponent
import { FinishingVariant } from "../../door/configurator/finishing-variant"; // plasmic-import: _0rE-i0b-tUt/codeComponent
import { GrooveDoor } from "../../door/configurator/groove"; // plasmic-import: 8V98shg8_J4H/codeComponent
import { FrameDoor } from "../../door/configurator/frame"; // plasmic-import: CnuhOfnl-a-a/codeComponent
import { AddonDoor } from "../../door/configurator/addon"; // plasmic-import: g49Z5SosGCS0/codeComponent
import { DetailPrice } from "../../door/detail-price"; // plasmic-import: iWTWpwjwUI2f/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: t5hn1zAmdmxJoKmkXG4dPV/projectcss
import sty from "./PlasmicDoor.module.css"; // plasmic-import: rd8xUc-BnZoZ/css

createPlasmicElementProxy;

export type PlasmicDoor__VariantMembers = {};
export type PlasmicDoor__VariantsArgs = {};
type VariantPropType = keyof PlasmicDoor__VariantsArgs;
export const PlasmicDoor__VariantProps = new Array<VariantPropType>();

export type PlasmicDoor__ArgsType = {};
type ArgPropType = keyof PlasmicDoor__ArgsType;
export const PlasmicDoor__ArgProps = new Array<ArgPropType>();

export type PlasmicDoor__OverridesType = {
  root?: Flex__<"div">;
  viewerWrapper?: Flex__<typeof ViewerWrapper>;
  doorViewer?: Flex__<typeof DoorViewer>;
  configuratorWrapper?: Flex__<typeof ConfiguratorWrapper>;
  jenisPintu?: Flex__<"div">;
  chooseDoor?: Flex__<typeof ChooseDoor>;
  ukuranPintu?: Flex__<"div">;
  sizeDoor?: Flex__<typeof SizeDoor>;
  finishingPintu?: Flex__<"div">;
  finishingDoor?: Flex__<typeof FinishingDoor>;
  finishingVariant?: Flex__<"div">;
  groovingPintu?: Flex__<"div">;
  grooveDoor?: Flex__<typeof GrooveDoor>;
  kusen?: Flex__<"div">;
  frameDoor?: Flex__<typeof FrameDoor>;
  tambahan?: Flex__<"div">;
  addonDoor?: Flex__<typeof AddonDoor>;
  detailPrice?: Flex__<typeof DetailPrice>;
};

export interface DefaultDoorProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDoor__RenderFunc(props: {
  variants: PlasmicDoor__VariantsArgs;
  args: PlasmicDoor__ArgsType;
  overrides: PlasmicDoor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <ViewerWrapper
            data-plasmic-name={"viewerWrapper"}
            data-plasmic-override={overrides.viewerWrapper}
            className={classNames("__wab_instance", sty.viewerWrapper)}
          >
            <DoorViewer
              data-plasmic-name={"doorViewer"}
              data-plasmic-override={overrides.doorViewer}
              className={classNames("__wab_instance", sty.doorViewer)}
            />

            <ConfiguratorWrapper
              data-plasmic-name={"configuratorWrapper"}
              data-plasmic-override={overrides.configuratorWrapper}
              className={classNames("__wab_instance", sty.configuratorWrapper)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k7FLs
                )}
              >
                {"Kustom Pintu"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"jenisPintu"}
                data-plasmic-override={overrides.jenisPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.jenisPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Na67
                  )}
                >
                  {"Jenis Pintu"}
                </div>
                <ChooseDoor
                  data-plasmic-name={"chooseDoor"}
                  data-plasmic-override={overrides.chooseDoor}
                  className={classNames("__wab_instance", sty.chooseDoor)}
                  doorNames={(() => {
                    const __composite = [
                      { id: null, name: null, modal: null },
                      { id: null, name: null, modal: null }
                    ];
                    __composite["0"]["id"] = "utama";
                    __composite["0"]["name"] = "Pintu Utama";
                    __composite["0"]["modal"] =
                      "<p>Pintu utama menggunakan kayu yang lebih berat, memberikan rasa kokoh dan daya tahan yang tinggi. Material ini dirancang untuk menahan beban dan memberikan perlindungan ekstra, menjadikannya ideal untuk pintu depan yang membutuhkan keamanan dan keawetan.</p>";
                    __composite["1"]["id"] = "kamar";
                    __composite["1"]["name"] = "Pintu Kamar";
                    __composite["1"]["modal"] =
                      "<p>Pintu kamar menggunakan kayu yang lebih ringan, lebih mudah dibuka dan dipasang. Material ini cocok untuk penggunaan interior, memberikan kenyamanan dan fungsionalitas tanpa mengorbankan estetika atau daya tahan yang sesuai untuk ruangan dalam rumah.</p>";
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"ukuranPintu"}
                data-plasmic-override={overrides.ukuranPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.ukuranPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1DgB
                  )}
                >
                  {"Ukuran Pintu"}
                </div>
                <SizeDoor
                  data-plasmic-name={"sizeDoor"}
                  data-plasmic-override={overrides.sizeDoor}
                  className={classNames("__wab_instance", sty.sizeDoor)}
                  sizes={(() => {
                    const __composite = [
                      {
                        idDoor: null,
                        length: null,
                        width: null,
                        price: null,
                        priceBelowDefaultWidth: null,
                        priceAboveDefaultWidth: null,
                        doorId: null,
                        defaultLength: null,
                        maxLength: null,
                        minLength: null,
                        defaultWidth: null,
                        maxWidth: null,
                        minWidth: null,
                        defaultPrice: null,
                        addedPriceAbove: null,
                        addedPriceBelow: null,
                        defaultHeight: null,
                        maxHeight: null,
                        minHeight: null
                      },
                      {
                        idDoor: null,
                        length: null,
                        width: null,
                        price: null,
                        priceBelowDefaultWidth: null,
                        priceAboveDefaultWidth: null,
                        doorId: null,
                        defaultLength: null,
                        maxLength: null,
                        minLength: null,
                        defaultWidth: null,
                        maxWidth: null,
                        minWidth: null,
                        defaultPrice: null,
                        addedPriceAbove: null,
                        addedPriceBelow: null,
                        minHeight: null,
                        defaultHeight: null,
                        maxHeight: null
                      }
                    ];
                    __composite["0"]["idDoor"] = "utama";
                    __composite["0"]["length"] = 210;
                    __composite["0"]["width"] = 83;
                    __composite["0"]["price"] = 560000;
                    __composite["0"]["priceBelowDefaultWidth"] = 100000;
                    __composite["0"]["priceAboveDefaultWidth"] = 200000;
                    __composite["0"]["doorId"] = "utama";
                    __composite["0"]["defaultLength"] = 210;
                    __composite["0"]["maxLength"] = 240;
                    __composite["0"]["minLength"] = 180;
                    __composite["0"]["defaultWidth"] = 83;
                    __composite["0"]["maxWidth"] = 118;
                    __composite["0"]["minWidth"] = 60;
                    __composite["0"]["defaultPrice"] = 560000;
                    __composite["0"]["addedPriceAbove"] = 200000;
                    __composite["0"]["addedPriceBelow"] = 100000;
                    __composite["0"]["defaultHeight"] = 210;
                    __composite["0"]["maxHeight"] = 240;
                    __composite["0"]["minHeight"] = 180;
                    __composite["1"]["idDoor"] = "kamar";
                    __composite["1"]["length"] = 210;
                    __composite["1"]["width"] = 83;
                    __composite["1"]["price"] = 660000;
                    __composite["1"]["priceBelowDefaultWidth"] = 100000;
                    __composite["1"]["priceAboveDefaultWidth"] = 200000;
                    __composite["1"]["doorId"] = "kamar";
                    __composite["1"]["defaultLength"] = 210;
                    __composite["1"]["maxLength"] = 240;
                    __composite["1"]["minLength"] = 180;
                    __composite["1"]["defaultWidth"] = 83;
                    __composite["1"]["maxWidth"] = 118;
                    __composite["1"]["minWidth"] = 60;
                    __composite["1"]["defaultPrice"] = 560000;
                    __composite["1"]["addedPriceAbove"] = 200000;
                    __composite["1"]["addedPriceBelow"] = 100000;
                    __composite["1"]["minHeight"] = 180;
                    __composite["1"]["defaultHeight"] = 210;
                    __composite["1"]["maxHeight"] = 240;
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"finishingPintu"}
                data-plasmic-override={overrides.finishingPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.finishingPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tyLu4
                  )}
                >
                  {"Finishing"}
                </div>
                <FinishingDoor
                  data-plasmic-name={"finishingDoor"}
                  data-plasmic-override={overrides.finishingDoor}
                  className={classNames("__wab_instance", sty.finishingDoor)}
                  finishings={(() => {
                    const __composite = [
                      { doorId: null, name: null, price: null },
                      { doorId: null, name: null, price: null, modal: null },
                      { doorId: null, name: null, price: null, modal: null }
                    ];
                    __composite["0"]["doorId"] = "kamar";
                    __composite["0"]["name"] = "Tanpa Finishing";
                    __composite["0"]["price"] = 0;
                    __composite["1"]["doorId"] = "kamar";
                    __composite["1"]["name"] = "PVC";
                    __composite["1"]["price"] = 700000;
                    __composite["1"]["modal"] =
                      '<p dir="ltr">PVC sheet adalah finishing praktis yang tahan lama. Prosesnya melibatkan pemasangan lembaran PVC di atas pintu yang telah dilapisi lem, kemudian dipanaskan dan ditekan agar merekat sempurna.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan air, kelembapan, dan goresan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Mudah dibersihkan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Beragam warna dan tekstur.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    __composite["2"]["doorId"] = "kamar";
                    __composite["2"]["name"] = "HPL";
                    __composite["2"]["price"] = 850000;
                    __composite["2"]["modal"] =
                      '<p dir="ltr">HPL menawarkan daya tahan tinggi dan variasi desain. Lembaran HPL ditempelkan pada pintu yang telah diberi lem, kemudian ditekan dan dipangkas untuk hasil rapi dan kuat.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan Air</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan goresan, panas, dan bahan kimia.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Banyak pilihan desain.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"finishingVariant"}
                data-plasmic-override={overrides.finishingVariant}
                hasGap={true}
                className={classNames(projectcss.all, sty.finishingVariant)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vbWtE
                  )}
                >
                  {"Finishing Variant"}
                </div>
                <FinishingVariant
                  className={classNames(
                    "__wab_instance",
                    sty.finishingVariant__gcuKx
                  )}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"groovingPintu"}
                data-plasmic-override={overrides.groovingPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.groovingPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0HCv
                  )}
                >
                  {"Grooving"}
                </div>
                <GrooveDoor
                  data-plasmic-name={"grooveDoor"}
                  data-plasmic-override={overrides.grooveDoor}
                  className={classNames("__wab_instance", sty.grooveDoor)}
                  grooves={(() => {
                    const __composite = [
                      { name: null, price: null },
                      { name: null, price: null, modal: null },
                      { name: null, price: null, modal: null },
                      { name: null, price: null, modal: null }
                    ];
                    __composite["0"]["name"] = "Tanpa Grooving";
                    __composite["0"]["price"] = 0;
                    __composite["1"]["name"] = "Simple";
                    __composite["1"]["price"] = 50000;
                    __composite["1"]["modal"] = "<p>eadad</p>";
                    __composite["2"]["name"] = "Intermediate";
                    __composite["2"]["price"] = 75000;
                    __composite["2"]["modal"] = "<p>ee</p>";
                    __composite["3"]["name"] = "Expert";
                    __composite["3"]["price"] = 200000;
                    __composite["3"]["modal"] = "<p>asda</p>";
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"kusen"}
                data-plasmic-override={overrides.kusen}
                hasGap={true}
                className={classNames(projectcss.all, sty.kusen)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aoB7O
                  )}
                >
                  {"Kusen"}
                </div>
                <FrameDoor
                  data-plasmic-name={"frameDoor"}
                  data-plasmic-override={overrides.frameDoor}
                  className={classNames("__wab_instance", sty.frameDoor)}
                  frames={(() => {
                    const __composite = [
                      { name: null, price: null, length: null, width: null },
                      { name: null, price: null, length: null, width: null },
                      {
                        name: null,
                        price: null,
                        length: null,
                        width: null,
                        architraveFrame: null
                      },
                      {
                        name: null,
                        length: null,
                        width: null,
                        architraveFrame: null,
                        price: null
                      }
                    ];
                    __composite["0"]["name"] = "Tanpa Kusen";
                    __composite["0"]["price"] = 0;
                    __composite["0"]["length"] = 0;
                    __composite["0"]["width"] = 0;
                    __composite["1"]["name"] = "Kecil";
                    __composite["1"]["price"] = 150000;
                    __composite["1"]["length"] = 4;
                    __composite["1"]["width"] = 7;
                    __composite["2"]["name"] = "Besar";
                    __composite["2"]["price"] = 200000;
                    __composite["2"]["length"] = 4;
                    __composite["2"]["width"] = 10;
                    __composite["2"]["architraveFrame"] = true;
                    __composite["3"]["name"] = "Custom";
                    __composite["3"]["length"] = 0;
                    __composite["3"]["width"] = 0;
                    __composite["3"]["architraveFrame"] = true;
                    __composite["3"]["price"] = 0;
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"tambahan"}
                data-plasmic-override={overrides.tambahan}
                hasGap={true}
                className={classNames(projectcss.all, sty.tambahan)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dD9Rb
                  )}
                >
                  {"Tambahan"}
                </div>
                <AddonDoor
                  data-plasmic-name={"addonDoor"}
                  data-plasmic-override={overrides.addonDoor}
                  addons={(() => {
                    const __composite = {
                      keyHole: null,
                      weatherStrip: null,
                      cylinder: null,
                      handle: null,
                      key: null,
                      hinge: null
                    };
                    __composite["keyHole"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Lubang Kunci (Standar dekson)";
                      __composite["price"] = 25000;
                      return __composite;
                    })();
                    __composite["weatherStrip"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Tali Air";
                      __composite["price"] = 25000;
                      return __composite;
                    })();
                    __composite["cylinder"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Cylinder";
                      __composite["price"] = 110000;
                      return __composite;
                    })();
                    __composite["handle"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Handle";
                      __composite["price"] = 200000;
                      return __composite;
                    })();
                    __composite["key"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Kunci";
                      __composite["price"] = 175000;
                      return __composite;
                    })();
                    __composite["hinge"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Engsel (3 pc)";
                      __composite["price"] = 140000;
                      return __composite;
                    })();
                    return __composite;
                  })()}
                  className={classNames("__wab_instance", sty.addonDoor)}
                />
              </Stack__>
              <DetailPrice
                data-plasmic-name={"detailPrice"}
                data-plasmic-override={overrides.detailPrice}
                className={classNames("__wab_instance", sty.detailPrice)}
                phone={"6281293586210"}
              />
            </ConfiguratorWrapper>
          </ViewerWrapper>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "viewerWrapper",
    "doorViewer",
    "configuratorWrapper",
    "jenisPintu",
    "chooseDoor",
    "ukuranPintu",
    "sizeDoor",
    "finishingPintu",
    "finishingDoor",
    "finishingVariant",
    "groovingPintu",
    "grooveDoor",
    "kusen",
    "frameDoor",
    "tambahan",
    "addonDoor",
    "detailPrice"
  ],
  viewerWrapper: [
    "viewerWrapper",
    "doorViewer",
    "configuratorWrapper",
    "jenisPintu",
    "chooseDoor",
    "ukuranPintu",
    "sizeDoor",
    "finishingPintu",
    "finishingDoor",
    "finishingVariant",
    "groovingPintu",
    "grooveDoor",
    "kusen",
    "frameDoor",
    "tambahan",
    "addonDoor",
    "detailPrice"
  ],
  doorViewer: ["doorViewer"],
  configuratorWrapper: [
    "configuratorWrapper",
    "jenisPintu",
    "chooseDoor",
    "ukuranPintu",
    "sizeDoor",
    "finishingPintu",
    "finishingDoor",
    "finishingVariant",
    "groovingPintu",
    "grooveDoor",
    "kusen",
    "frameDoor",
    "tambahan",
    "addonDoor",
    "detailPrice"
  ],
  jenisPintu: ["jenisPintu", "chooseDoor"],
  chooseDoor: ["chooseDoor"],
  ukuranPintu: ["ukuranPintu", "sizeDoor"],
  sizeDoor: ["sizeDoor"],
  finishingPintu: ["finishingPintu", "finishingDoor"],
  finishingDoor: ["finishingDoor"],
  finishingVariant: ["finishingVariant"],
  groovingPintu: ["groovingPintu", "grooveDoor"],
  grooveDoor: ["grooveDoor"],
  kusen: ["kusen", "frameDoor"],
  frameDoor: ["frameDoor"],
  tambahan: ["tambahan", "addonDoor"],
  addonDoor: ["addonDoor"],
  detailPrice: ["detailPrice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  viewerWrapper: typeof ViewerWrapper;
  doorViewer: typeof DoorViewer;
  configuratorWrapper: typeof ConfiguratorWrapper;
  jenisPintu: "div";
  chooseDoor: typeof ChooseDoor;
  ukuranPintu: "div";
  sizeDoor: typeof SizeDoor;
  finishingPintu: "div";
  finishingDoor: typeof FinishingDoor;
  finishingVariant: "div";
  groovingPintu: "div";
  grooveDoor: typeof GrooveDoor;
  kusen: "div";
  frameDoor: typeof FrameDoor;
  tambahan: "div";
  addonDoor: typeof AddonDoor;
  detailPrice: typeof DetailPrice;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDoor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDoor__VariantsArgs;
    args?: PlasmicDoor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDoor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDoor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDoor__ArgProps,
          internalVariantPropNames: PlasmicDoor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDoor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDoor";
  } else {
    func.displayName = `PlasmicDoor.${nodeName}`;
  }
  return func;
}

export const PlasmicDoor = Object.assign(
  // Top-level PlasmicDoor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    viewerWrapper: makeNodeComponent("viewerWrapper"),
    doorViewer: makeNodeComponent("doorViewer"),
    configuratorWrapper: makeNodeComponent("configuratorWrapper"),
    jenisPintu: makeNodeComponent("jenisPintu"),
    chooseDoor: makeNodeComponent("chooseDoor"),
    ukuranPintu: makeNodeComponent("ukuranPintu"),
    sizeDoor: makeNodeComponent("sizeDoor"),
    finishingPintu: makeNodeComponent("finishingPintu"),
    finishingDoor: makeNodeComponent("finishingDoor"),
    finishingVariant: makeNodeComponent("finishingVariant"),
    groovingPintu: makeNodeComponent("groovingPintu"),
    grooveDoor: makeNodeComponent("grooveDoor"),
    kusen: makeNodeComponent("kusen"),
    frameDoor: makeNodeComponent("frameDoor"),
    tambahan: makeNodeComponent("tambahan"),
    addonDoor: makeNodeComponent("addonDoor"),
    detailPrice: makeNodeComponent("detailPrice"),

    // Metadata about props expected for PlasmicDoor
    internalVariantProps: PlasmicDoor__VariantProps,
    internalArgProps: PlasmicDoor__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDoor;
/* prettier-ignore-end */
