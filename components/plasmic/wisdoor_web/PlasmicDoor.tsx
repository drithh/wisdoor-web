// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: t5hn1zAmdmxJoKmkXG4dPV
// Component: rd8xUc-BnZoZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DoorViewer } from "../../door-viewer"; // plasmic-import: SH_PqjJ_I-5G/codeComponent
import { ChooseDoor } from "../../door/configurator/choose"; // plasmic-import: LMn0cgg59gxw/codeComponent
import { SizeDoor } from "../../door/configurator/size"; // plasmic-import: 7H1b44gqct0K/codeComponent
import { TypeDoor } from "../../door/configurator/type"; // plasmic-import: CKXkj02X-GEJ/codeComponent
import { FinishingDoor } from "../../door/configurator/finishing"; // plasmic-import: YV413SY07lXf/codeComponent
import { AddonDoor } from "../../door/configurator/addon"; // plasmic-import: g49Z5SosGCS0/codeComponent
import { FrameDoor } from "../../door/configurator/frame"; // plasmic-import: CnuhOfnl-a-a/codeComponent
import { Wrapper } from "../../door/components/wrapper"; // plasmic-import: NTrLzVk65nhU/codeComponent
import { FinishingFrame } from "../../door/configurator/finishing-frame"; // plasmic-import: kDU8hj27ED9Y/codeComponent
import { HingeDoor } from "../../door/configurator/hinge"; // plasmic-import: jS-fIcPAcZ7Z/codeComponent
import { DetailPrice } from "../../door/detail-price"; // plasmic-import: iWTWpwjwUI2f/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: t5hn1zAmdmxJoKmkXG4dPV/projectcss
import sty from "./PlasmicDoor.module.css"; // plasmic-import: rd8xUc-BnZoZ/css

createPlasmicElementProxy;

export type PlasmicDoor__VariantMembers = {};
export type PlasmicDoor__VariantsArgs = {};
type VariantPropType = keyof PlasmicDoor__VariantsArgs;
export const PlasmicDoor__VariantProps = new Array<VariantPropType>();

export type PlasmicDoor__ArgsType = {};
type ArgPropType = keyof PlasmicDoor__ArgsType;
export const PlasmicDoor__ArgProps = new Array<ArgPropType>();

export type PlasmicDoor__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  doorViewer?: Flex__<typeof DoorViewer>;
  section?: Flex__<"section">;
  jenisPintu?: Flex__<"div">;
  chooseDoor?: Flex__<typeof ChooseDoor>;
  ukuranPintu?: Flex__<"div">;
  sizeDoor?: Flex__<typeof SizeDoor>;
  bahanPintu?: Flex__<"div">;
  typeDoor?: Flex__<typeof TypeDoor>;
  finishingPintu?: Flex__<"div">;
  finishingDoor?: Flex__<typeof FinishingDoor>;
  tambahan?: Flex__<"div">;
  addonDoor?: Flex__<typeof AddonDoor>;
  kusen?: Flex__<"div">;
  frameDoor?: Flex__<typeof FrameDoor>;
  wrapper?: Flex__<typeof Wrapper>;
  finishingKusen?: Flex__<"div">;
  finishingFrame?: Flex__<typeof FinishingFrame>;
  engsel?: Flex__<"div">;
  hingeDoor?: Flex__<typeof HingeDoor>;
  detailPrice?: Flex__<typeof DetailPrice>;
};

export interface DefaultDoorProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDoor__RenderFunc(props: {
  variants: PlasmicDoor__VariantsArgs;
  args: PlasmicDoor__ArgsType;
  overrides: PlasmicDoor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <DoorViewer
              data-plasmic-name={"doorViewer"}
              data-plasmic-override={overrides.doorViewer}
              className={classNames("__wab_instance", sty.doorViewer)}
            />

            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k7FLs
                )}
              >
                {"Kustom Pintu"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"jenisPintu"}
                data-plasmic-override={overrides.jenisPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.jenisPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Na67
                  )}
                >
                  {"Jenis Pintu"}
                </div>
                <ChooseDoor
                  data-plasmic-name={"chooseDoor"}
                  data-plasmic-override={overrides.chooseDoor}
                  className={classNames("__wab_instance", sty.chooseDoor)}
                  doorNames={(() => {
                    const __composite = [
                      { id: null, name: null, modal: null },
                      { id: null, name: null, modal: null }
                    ];
                    __composite["0"]["id"] = "utama";
                    __composite["0"]["name"] = "Pintu Utama";
                    __composite["0"]["modal"] =
                      "<p>Pintu utama menggunakan kayu yang lebih berat, memberikan rasa kokoh dan daya tahan yang tinggi. Material ini dirancang untuk menahan beban dan memberikan perlindungan ekstra, menjadikannya ideal untuk pintu depan yang membutuhkan keamanan dan keawetan.</p>";
                    __composite["1"]["id"] = "kamar";
                    __composite["1"]["name"] = "Pintu Kamar";
                    __composite["1"]["modal"] =
                      "<p>Pintu kamar menggunakan kayu yang lebih ringan, lebih mudah dibuka dan dipasang. Material ini cocok untuk penggunaan interior, memberikan kenyamanan dan fungsionalitas tanpa mengorbankan estetika atau daya tahan yang sesuai untuk ruangan dalam rumah.</p>";
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"ukuranPintu"}
                data-plasmic-override={overrides.ukuranPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.ukuranPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1DgB
                  )}
                >
                  {"Ukuran Pintu"}
                </div>
                <SizeDoor
                  data-plasmic-name={"sizeDoor"}
                  data-plasmic-override={overrides.sizeDoor}
                  className={classNames("__wab_instance", sty.sizeDoor)}
                  sizes={(() => {
                    const __composite = [
                      {
                        idDoor: null,
                        length: null,
                        width: null,
                        price: null,
                        priceBelowDefaultWidth: null,
                        priceAboveDefaultWidth: null,
                        doorId: null
                      },
                      {
                        idDoor: null,
                        length: null,
                        width: null,
                        price: null,
                        priceBelowDefaultWidth: null,
                        priceAboveDefaultWidth: null,
                        doorId: null
                      }
                    ];
                    __composite["0"]["idDoor"] = "utama";
                    __composite["0"]["length"] = 210;
                    __composite["0"]["width"] = 83;
                    __composite["0"]["price"] = 560000;
                    __composite["0"]["priceBelowDefaultWidth"] = 100000;
                    __composite["0"]["priceAboveDefaultWidth"] = 200000;
                    __composite["0"]["doorId"] = "utama";
                    __composite["1"]["idDoor"] = "kamar";
                    __composite["1"]["length"] = 210;
                    __composite["1"]["width"] = 83;
                    __composite["1"]["price"] = 660000;
                    __composite["1"]["priceBelowDefaultWidth"] = 100000;
                    __composite["1"]["priceAboveDefaultWidth"] = 200000;
                    __composite["1"]["doorId"] = "kamar";
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"bahanPintu"}
                data-plasmic-override={overrides.bahanPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.bahanPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___09NR2
                  )}
                >
                  {"Bahan Pintu"}
                </div>
                <TypeDoor
                  data-plasmic-name={"typeDoor"}
                  data-plasmic-override={overrides.typeDoor}
                  className={classNames("__wab_instance", sty.typeDoor)}
                  types={(() => {
                    const __composite = [
                      { image: null, type: null, price: null, modal: null },
                      { type: null, image: null, price: null, modal: null }
                    ];
                    __composite["0"]["image"] =
                      "https://site-assets.plasmic.app/ec7615efd9eec59506460977dde021a8.jpg";
                    __composite["0"]["type"] = "HMR (3mm)";
                    __composite["0"]["price"] = 240000;
                    __composite["0"]["modal"] =
                      '<p dir="ltr">HMR adalah material tahan lembab yang ideal untuk bagian dalam pintu, terutama di area dengan kelembapan tinggi. Prosesnya melibatkan pemotongan dan penyusunan HMR menjadi kerangka pintu, kemudian permukaan dapat dilapisi dengan cat atau laminasi sesuai kebutuhan.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan terhadap kelembapan, cocok untuk area basah.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Stabilitas dimensi yang baik, tidak mudah melengkung.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Permukaan halus, mudah untuk dilapisi atau dicat.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Berat, memberikan rasa kokoh pada pintu.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    __composite["1"]["type"] = "Plywood Meranti (3mm)";
                    __composite["1"]["image"] =
                      "https://site-assets.plasmic.app/843daac37ed39e5c0fd4392b69506628.jpg";
                    __composite["1"]["price"] = 240000;
                    __composite["1"]["modal"] =
                      '<p dir="ltr">Plywood adalah material serbaguna untuk bagian dalam pintu yang kuat dan tahan lama. Prosesnya melibatkan pemotongan lembaran plywood dan menyusunnya menjadi kerangka pintu. Plywood dapat difinishing secara natural dengan melamine, menonjolkan keindahan serat kayu.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Kekuatan struktural tinggi dan tahan lama.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Lebih ringan dibandingkan HMR, memudahkan pemasangan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Bisa difinishing secara natural dengan melamine, menonjolkan serat kayu.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"finishingPintu"}
                data-plasmic-override={overrides.finishingPintu}
                hasGap={true}
                className={classNames(projectcss.all, sty.finishingPintu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tyLu4
                  )}
                >
                  {"Finishing Pintu"}
                </div>
                <FinishingDoor
                  data-plasmic-name={"finishingDoor"}
                  data-plasmic-override={overrides.finishingDoor}
                  className={classNames("__wab_instance", sty.finishingDoor)}
                  finishings={(() => {
                    const __composite = [
                      { doorId: null, name: null, price: null },
                      { doorId: null, name: null, price: null, modal: null },
                      { doorId: null, name: null, price: null, modal: null },
                      { doorId: null, name: null, price: null, modal: null },
                      { doorId: null, name: null, price: null },
                      { doorId: null, name: null, price: null, modal: null },
                      { doorId: null, name: null, price: null, modal: null },
                      { doorId: null, name: null, price: null, modal: null },
                      { doorId: null, name: null, price: null, modal: null }
                    ];
                    __composite["0"]["doorId"] = "kamar";
                    __composite["0"]["name"] = "Tidak Finishing";
                    __composite["0"]["price"] = 0;
                    __composite["1"]["doorId"] = "kamar";
                    __composite["1"]["name"] = "Duco Putih";
                    __composite["1"]["price"] = 370000;
                    __composite["1"]["modal"] =
                      '<p dir="ltr">Duco putih memberikan hasil akhir elegan melalui proses pengamplasan, aplikasi cat dasar, dan beberapa lapisan cat duco, yang dihaluskan di antara tiap lapisan. Finishing akhir menambah kilau dan perlindungan.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tampilan elegan dan bersih.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Permukaan sangat halus.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Warna putih seragam.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    __composite["2"]["doorId"] = "kamar";
                    __composite["2"]["name"] = "PVC Sheet";
                    __composite["2"]["price"] = 700000;
                    __composite["2"]["modal"] =
                      '<p dir="ltr">PVC sheet adalah finishing praktis yang tahan lama. Prosesnya melibatkan pemasangan lembaran PVC di atas pintu yang telah dilapisi lem, kemudian dipanaskan dan ditekan agar merekat sempurna.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan air, kelembapan, dan goresan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Mudah dibersihkan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Beragam warna dan tekstur.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    __composite["3"]["doorId"] = "kamar";
                    __composite["3"]["name"] = "HPL Std";
                    __composite["3"]["price"] = 850000;
                    __composite["3"]["modal"] =
                      '<p dir="ltr">HPL menawarkan daya tahan tinggi dan variasi desain. Lembaran HPL ditempelkan pada pintu yang telah diberi lem, kemudian ditekan dan dipangkas untuk hasil rapi dan kuat.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan Air</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan goresan, panas, dan bahan kimia.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Banyak pilihan desain.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    __composite["4"]["doorId"] = "utama";
                    __composite["4"]["name"] = "Tidak Finishing";
                    __composite["4"]["price"] = 0;
                    __composite["5"]["doorId"] = "utama";
                    __composite["5"]["name"] = "Duco Putih";
                    __composite["5"]["price"] = 370000;
                    __composite["5"]["modal"] =
                      '<p dir="ltr">Duco putih memberikan hasil akhir elegan melalui proses pengamplasan, aplikasi cat dasar, dan beberapa lapisan cat duco, yang dihaluskan di antara tiap lapisan. Finishing akhir menambah kilau dan perlindungan.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tampilan elegan dan bersih.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Permukaan sangat halus.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Warna putih seragam.</p>\n</li>\n</ul>';
                    __composite["6"]["doorId"] = "utama";
                    __composite["6"]["name"] = "Melamine";
                    __composite["6"]["price"] = 370000;
                    __composite["6"]["modal"] =
                      '<p dir="ltr">Melamine adalah finishing yang populer untuk memberikan tampilan kayu alami. Prosesnya melibatkan aplikasi beberapa lapisan melamine dengan semprotan, diikuti dengan pengeringan dan pengamplasan ringan di antara lapisan, hingga mencapai hasil yang diinginkan.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Menonjolkan serat alami kayu.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Memberikan perlindungan terhadap goresan dan kelembapan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Hasil akhir yang mengkilap atau matte sesuai preferensi.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    __composite["7"]["doorId"] = "utama";
                    __composite["7"]["name"] = "PVC Sheet";
                    __composite["7"]["price"] = 700000;
                    __composite["7"]["modal"] =
                      '<p dir="ltr">PVC sheet adalah finishing praktis yang tahan lama. Prosesnya melibatkan pemasangan lembaran PVC di atas pintu yang telah dilapisi lem, kemudian dipanaskan dan ditekan agar merekat sempurna.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan air, kelembapan, dan goresan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Mudah dibersihkan.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Beragam warna dan tekstur.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    __composite["8"]["doorId"] = "utama";
                    __composite["8"]["name"] = "HPL Std";
                    __composite["8"]["price"] = 850000;
                    __composite["8"]["modal"] =
                      '<p dir="ltr">HPL menawarkan daya tahan tinggi dan variasi desain. Lembaran HPL ditempelkan pada pintu yang telah diberi lem, kemudian ditekan dan dipangkas untuk hasil rapi dan kuat.</p>\n<p dir="ltr">&nbsp;</p>\n<p dir="ltr"><strong>Keunggulan:</strong></p>\n<ul>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan Air</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Tahan goresan, panas, dan bahan kimia.</p>\n</li>\n<li dir="ltr" aria-level="1">\n<p dir="ltr" role="presentation">Banyak pilihan desain.</p>\n</li>\n</ul>\n<p>&nbsp;</p>';
                    return __composite;
                  })()}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"tambahan"}
                data-plasmic-override={overrides.tambahan}
                hasGap={true}
                className={classNames(projectcss.all, sty.tambahan)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dD9Rb
                  )}
                >
                  {"Tambahan"}
                </div>
                <AddonDoor
                  data-plasmic-name={"addonDoor"}
                  data-plasmic-override={overrides.addonDoor}
                  addons={(() => {
                    const __composite = { keyHole: null, weatherStrip: null };
                    __composite["keyHole"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Lubang Kunci (Standar dekson)";
                      __composite["price"] = 25000;
                      return __composite;
                    })();
                    __composite["weatherStrip"] = (() => {
                      const __composite = { text: null, price: null };
                      __composite["text"] = "Tali Air";
                      __composite["price"] = 25000;
                      return __composite;
                    })();
                    return __composite;
                  })()}
                  className={classNames("__wab_instance", sty.addonDoor)}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"kusen"}
                data-plasmic-override={overrides.kusen}
                hasGap={true}
                className={classNames(projectcss.all, sty.kusen)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aoB7O
                  )}
                >
                  {"Kusen"}
                </div>
                <FrameDoor
                  data-plasmic-name={"frameDoor"}
                  data-plasmic-override={overrides.frameDoor}
                  className={classNames("__wab_instance", sty.frameDoor)}
                  frames={(() => {
                    const __composite = [
                      { name: null, price: null, length: null, width: null },
                      { name: null, price: null, length: null, width: null },
                      {
                        name: null,
                        price: null,
                        length: null,
                        width: null,
                        architraveFrame: null
                      },
                      {
                        name: null,
                        length: null,
                        width: null,
                        architraveFrame: null,
                        price: null
                      }
                    ];
                    __composite["0"]["name"] = "Tanpa Kusen";
                    __composite["0"]["price"] = 0;
                    __composite["0"]["length"] = 0;
                    __composite["0"]["width"] = 0;
                    __composite["1"]["name"] = "Kecil";
                    __composite["1"]["price"] = 150000;
                    __composite["1"]["length"] = 4;
                    __composite["1"]["width"] = 7;
                    __composite["2"]["name"] = "Besar";
                    __composite["2"]["price"] = 200000;
                    __composite["2"]["length"] = 4;
                    __composite["2"]["width"] = 10;
                    __composite["2"]["architraveFrame"] = true;
                    __composite["3"]["name"] = "Custom";
                    __composite["3"]["length"] = 0;
                    __composite["3"]["width"] = 0;
                    __composite["3"]["architraveFrame"] = true;
                    __composite["3"]["price"] = 0;
                    return __composite;
                  })()}
                />
              </Stack__>
              <Wrapper
                data-plasmic-name={"wrapper"}
                data-plasmic-override={overrides.wrapper}
                className={classNames("__wab_instance", sty.wrapper)}
              >
                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"finishingKusen"}
                    data-plasmic-override={overrides.finishingKusen}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.finishingKusen)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g4SLw
                      )}
                    >
                      {"Finishing Kusen"}
                    </div>
                    <FinishingFrame
                      data-plasmic-name={"finishingFrame"}
                      data-plasmic-override={overrides.finishingFrame}
                      className={classNames(
                        "__wab_instance",
                        sty.finishingFrame
                      )}
                      finishings={(() => {
                        const __composite = [
                          { name: null, price: null },
                          { name: null, price: null, color: null },
                          { color: null, name: null, price: null }
                        ];
                        __composite["0"]["name"] = "Tanpa Finishing";
                        __composite["0"]["price"] = 0;
                        __composite["1"]["name"] = "Melamin";
                        __composite["1"]["price"] = 150000;
                        __composite["1"]["color"] = (() => {
                          const __composite = [
                            { name: null, colorClass: null },
                            { name: null, colorClass: null }
                          ];
                          __composite["0"]["name"] = "Coklat";
                          __composite["0"]["colorClass"] = "bg-[#855E42]";
                          __composite["1"]["name"] = "Hitam";
                          __composite["1"]["colorClass"] = "bg-black";
                          return __composite;
                        })();
                        __composite["2"]["color"] = (() => {
                          const __composite = [
                            { colorClass: null, name: null }
                          ];
                          __composite["0"]["colorClass"] = "bg-[#855E42]";
                          __composite["0"]["name"] = "Coklat";
                          return __composite;
                        })();
                        __composite["2"]["name"] = "Duco";
                        __composite["2"]["price"] = 150000;
                        return __composite;
                      })()}
                    />
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"engsel"}
                    data-plasmic-override={overrides.engsel}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.engsel)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4OjVi
                      )}
                    >
                      {"Engsel"}
                    </div>
                    <HingeDoor
                      data-plasmic-name={"hingeDoor"}
                      data-plasmic-override={overrides.hingeDoor}
                      className={classNames("__wab_instance", sty.hingeDoor)}
                      hinges={(() => {
                        const __composite = [
                          { name: null, price: null },
                          { name: null, price: null },
                          { name: null, price: null },
                          { name: null, price: null },
                          { name: null, price: null }
                        ];
                        __composite["0"]["name"] = "Tanpa Engsel";
                        __composite["0"]["price"] = 0;
                        __composite["1"]["name"] = "1 Engsel";
                        __composite["1"]["price"] = 25000;
                        __composite["2"]["name"] = "2 Engsel";
                        __composite["2"]["price"] = 50000;
                        __composite["3"]["name"] = "3 Engsel";
                        __composite["3"]["price"] = 75000;
                        __composite["4"]["name"] = "4 Engsel";
                        __composite["4"]["price"] = 80000;
                        return __composite;
                      })()}
                    />
                  </Stack__>
                ) : null}
              </Wrapper>
              <DetailPrice
                data-plasmic-name={"detailPrice"}
                data-plasmic-override={overrides.detailPrice}
                className={classNames("__wab_instance", sty.detailPrice)}
                phone={"6281293586210"}
              />
            </section>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "doorViewer",
    "section",
    "jenisPintu",
    "chooseDoor",
    "ukuranPintu",
    "sizeDoor",
    "bahanPintu",
    "typeDoor",
    "finishingPintu",
    "finishingDoor",
    "tambahan",
    "addonDoor",
    "kusen",
    "frameDoor",
    "wrapper",
    "finishingKusen",
    "finishingFrame",
    "engsel",
    "hingeDoor",
    "detailPrice"
  ],
  freeBox: [
    "freeBox",
    "doorViewer",
    "section",
    "jenisPintu",
    "chooseDoor",
    "ukuranPintu",
    "sizeDoor",
    "bahanPintu",
    "typeDoor",
    "finishingPintu",
    "finishingDoor",
    "tambahan",
    "addonDoor",
    "kusen",
    "frameDoor",
    "wrapper",
    "finishingKusen",
    "finishingFrame",
    "engsel",
    "hingeDoor",
    "detailPrice"
  ],
  doorViewer: ["doorViewer"],
  section: [
    "section",
    "jenisPintu",
    "chooseDoor",
    "ukuranPintu",
    "sizeDoor",
    "bahanPintu",
    "typeDoor",
    "finishingPintu",
    "finishingDoor",
    "tambahan",
    "addonDoor",
    "kusen",
    "frameDoor",
    "wrapper",
    "finishingKusen",
    "finishingFrame",
    "engsel",
    "hingeDoor",
    "detailPrice"
  ],
  jenisPintu: ["jenisPintu", "chooseDoor"],
  chooseDoor: ["chooseDoor"],
  ukuranPintu: ["ukuranPintu", "sizeDoor"],
  sizeDoor: ["sizeDoor"],
  bahanPintu: ["bahanPintu", "typeDoor"],
  typeDoor: ["typeDoor"],
  finishingPintu: ["finishingPintu", "finishingDoor"],
  finishingDoor: ["finishingDoor"],
  tambahan: ["tambahan", "addonDoor"],
  addonDoor: ["addonDoor"],
  kusen: ["kusen", "frameDoor"],
  frameDoor: ["frameDoor"],
  wrapper: [
    "wrapper",
    "finishingKusen",
    "finishingFrame",
    "engsel",
    "hingeDoor"
  ],
  finishingKusen: ["finishingKusen", "finishingFrame"],
  finishingFrame: ["finishingFrame"],
  engsel: ["engsel", "hingeDoor"],
  hingeDoor: ["hingeDoor"],
  detailPrice: ["detailPrice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  doorViewer: typeof DoorViewer;
  section: "section";
  jenisPintu: "div";
  chooseDoor: typeof ChooseDoor;
  ukuranPintu: "div";
  sizeDoor: typeof SizeDoor;
  bahanPintu: "div";
  typeDoor: typeof TypeDoor;
  finishingPintu: "div";
  finishingDoor: typeof FinishingDoor;
  tambahan: "div";
  addonDoor: typeof AddonDoor;
  kusen: "div";
  frameDoor: typeof FrameDoor;
  wrapper: typeof Wrapper;
  finishingKusen: "div";
  finishingFrame: typeof FinishingFrame;
  engsel: "div";
  hingeDoor: typeof HingeDoor;
  detailPrice: typeof DetailPrice;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDoor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDoor__VariantsArgs;
    args?: PlasmicDoor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDoor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDoor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDoor__ArgProps,
          internalVariantPropNames: PlasmicDoor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDoor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDoor";
  } else {
    func.displayName = `PlasmicDoor.${nodeName}`;
  }
  return func;
}

export const PlasmicDoor = Object.assign(
  // Top-level PlasmicDoor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    doorViewer: makeNodeComponent("doorViewer"),
    section: makeNodeComponent("section"),
    jenisPintu: makeNodeComponent("jenisPintu"),
    chooseDoor: makeNodeComponent("chooseDoor"),
    ukuranPintu: makeNodeComponent("ukuranPintu"),
    sizeDoor: makeNodeComponent("sizeDoor"),
    bahanPintu: makeNodeComponent("bahanPintu"),
    typeDoor: makeNodeComponent("typeDoor"),
    finishingPintu: makeNodeComponent("finishingPintu"),
    finishingDoor: makeNodeComponent("finishingDoor"),
    tambahan: makeNodeComponent("tambahan"),
    addonDoor: makeNodeComponent("addonDoor"),
    kusen: makeNodeComponent("kusen"),
    frameDoor: makeNodeComponent("frameDoor"),
    wrapper: makeNodeComponent("wrapper"),
    finishingKusen: makeNodeComponent("finishingKusen"),
    finishingFrame: makeNodeComponent("finishingFrame"),
    engsel: makeNodeComponent("engsel"),
    hingeDoor: makeNodeComponent("hingeDoor"),
    detailPrice: makeNodeComponent("detailPrice"),

    // Metadata about props expected for PlasmicDoor
    internalVariantProps: PlasmicDoor__VariantProps,
    internalArgProps: PlasmicDoor__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDoor;
/* prettier-ignore-end */
